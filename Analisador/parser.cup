/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal 	BOOLEAN, CLASS, DO, ELSE, EXTENDS, FALSE, FOR, IF, INT, NEW,
			PUBLIC, RETURN, STATIC, THIS, TRUE, VOID, WHILE, MAIN, LENGTH, STRING;
			
terminal 	L_PARE, R_PARE, L_CHA, R_CHA, L_CON, R_CON; 

terminal 	OR, AND, EQ, NEQ, LT, LEQ, GT, GEQ, PLUS, MINUS, TIMES, DIV, MOD, NOT;

terminal 	SEMI, DOT, ATB, COMMA;

terminal 	INTEGER, FLOAT, ID;

/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions

non terminal    Goal;
non terminal String ClassDeclaration, Identifier, MainClass,
                VarDeclaration, MethodDeclaration, Statement, Type,
                Expression,
//Auxiliar
                ClassDeclarations, VarDeclarations, MethodDeclarations,
                Statements, Arguments, ExtraArgs, Operator, ExpArguments, ExtraExpArgs;

/* Precedences */
precedence left AND;
precedence left NOT;
precedence left LT;
precedence left PLUS , MINUS;
precedence left TIMES;
precedence left DOT;
precedence left L_CON;
precedence left L_PARE;
precedence left L_CHA;
precedence left VarDeclaration; 
precedence left ATB;

/* The grammar rules */
Goal  ::= MainClass:mc  ClassDeclarations:cs  {:System.out.println("Start(" + mc + cs + ")");:}; 

MainClass ::= CLASS Identifier:id L_CHA PUBLIC STATIC VOID MAIN L_PARE STRING L_CON R_CON Identifier:arg L_PARE L_CHA Statement:stm R_CHA R_CHA
				{:sb.setLength(0);RESULT = sb.append("Main Class(").append(id).append("Main (String[] ").append(arg).append(") {\n").append(stm).append("\n})").toString();:};
				
				
ClassDeclaration  ::=  CLASS Identifier:id EXTENDS Identifier:exId L_CHA VarDeclarations:vars MethodDeclarations:methods R_CHA 
								{:sb.setLength(0);RESULT = sb.append("Class(").append(id).append("extends ").append(exId).append("{\n").append(vars).append(methods).append("\n}\n)").toString();:}
                      |CLASS Identifier:id L_CHA VarDeclarations:vars MethodDeclarations:methods R_CHA
                       			{:sb.setLength(0);RESULT = sb.append("Class(").append(id).append("{\n").append(vars).append(methods).append("\n})\n").toString();:};

VarDeclaration  ::= Type:tp Identifier:id SEMI {:sb.setLength(0);RESULT = sb.append("Var (").append(tp).append(id).append(");\n").toString(); System.out.println("declared var " + RESULT);:};                      

MethodDeclaration ::= PUBLIC Type:tp Identifier:id L_PARE Arguments:args R_PARE L_CHA VarDeclarations:vars Statements:stmts RETURN Expression:retExp SEMI R_CHA
					 {:sb.setLength(0);RESULT = sb.append("Method (").append(tp).append(id).append("(").append(args).append(")").append("{\n").append(vars).append(stmts).append("return ").append(retExp).append("\n}\n").toString(); :};


ClassDeclarations ::= {:RESULT = "";:}
  | ClassDeclarations:cl ClassDeclaration:c  
	{:sb.setLength(0);RESULT = sb.append(c).append(cl).toString();:};

VarDeclarations ::= {:RESULT = "";:}
  | VarDeclarations:vl VarDeclaration:v 
	{:sb.setLength(0);RESULT = sb.append(v).append(vl).toString();:};
	
MethodDeclarations ::= {:RESULT = "";:}
  | MethodDeclarations:ml MethodDeclaration:m  
  	{:sb.setLength(0);RESULT = sb.append(m).append(ml).toString();:};
Statements ::= {:RESULT = "";:}
  | Statement:s Statements:sl 
  	{:sb.setLength(0);RESULT = sb.append(s).append(sl).toString();:};
Arguments ::= {:RESULT = "";:}
	| Type:tp Identifier:id ExtraArgs:eArgs 
	{:sb.setLength(0);RESULT = sb.append(tp).append(" ").append(id).append(eArgs).toString();:};
ExtraArgs::= {:RESULT = "";:}
	| COMMA Type:tp Identifier:id ExtraArgs:eArgs  
		{:sb.setLength(0);RESULT = sb.append(", ").append(tp).append(" ").append(id).append(eArgs).toString();:};
ExpArguments ::= {:RESULT = "";:}
	| Expression:exp ExtraExpArgs:eArgs 
	{:sb.setLength(0);RESULT = sb.append(exp).append(eArgs).toString();:};
ExtraExpArgs::= {:RESULT = "";:}
	| COMMA Expression:exp ExtraExpArgs:eArgs 
		{:sb.setLength(0);RESULT = sb.append(", ").append(exp).append(eArgs).toString();:};
Operator ::=  AND {:RESULT = "OP (&&)";:} | LT {:RESULT = "OP (<)";:} 
			| PLUS {:RESULT = "OP (+)";:} | MINUS {:RESULT = "OP (-)";:} 
			| TIMES {:RESULT = "OP (*)";:} ;


//Other	



ClassDeclaration  ::=  CLASS Identifier:id EXTENDS Identifier:exId L_CHA VarDeclarations:vars MethodDeclarations:methods R_CHA 
								{:sb.setLength(0);RESULT = sb.append("Class(").append(id).append("extends ").append(exId).append("{\n").append(vars).append(methods).append("\n}\n)").toString();:}
                      |CLASS Identifier:id L_CHA VarDeclarations:vars MethodDeclarations:methods R_CHA
                       			{:sb.setLength(0);RESULT = sb.append("Class(").append(id).append("{\n").append(vars).append(methods).append("\n})\n").toString();:};

VarDeclaration  ::= Type:tp Identifier:id SEMI {:sb.setLength(0);RESULT = sb.append("Var (").append(tp).append(id).append(");\n").toString(); System.out.println("declared var " + RESULT);:};                      

MethodDeclaration ::= PUBLIC Type:tp Identifier:id L_PARE Arguments:args R_PARE L_CHA VarDeclarations:vars Statements:stmts RETURN Expression:retExp SEMI R_CHA
					 {:sb.setLength(0);RESULT = sb.append("Method (").append(tp).append(id).append("(").append(args).append(")").append("{\n").append(vars).append(stmts).append("return ").append(retExp).append("\n}\n").toString(); :};


Type  ::= INT L_CON R_CON	{:RESULT = "type(int[])";:}
| BOOLEAN									{:RESULT = "type(boolean)";:}
| INT 										{:RESULT = "type(int)";:}
| Identifier:id 							{:RESULT = "type("+id+")";:}; 


Statement ::= L_CHA Statements:stmts R_CHA 
			{:sb.setLength(0); RESULT=sb.append("{\n").append(stmts).append("\n}").toString();:} 
			| IF L_PARE Expression:exp R_PARE Statement:stmt ELSE Statement:stmt2
						{:sb.setLength(0); RESULT=sb.append("if(").append(exp).append("){\n").append(stmt).append("\n} else {\n").append(stmt2).append("\n})").toString();:}
			| WHILE L_PARE Expression:exp R_PARE Statement:stmt
				{:sb.setLength(0); RESULT=sb.append("while(").append(exp).append("){\n").append(stmt).append("\n})").toString();:}
			| Identifier:id ATB Expression:exp SEMI
				{:sb.setLength(0); RESULT=sb.append("ATB(").append(id).append("<-").append(exp).append(";").toString();:}
			| Identifier:id L_CON Expression:indexExp R_CON ATB Expression:exp SEMI
				{:sb.setLength(0); RESULT=sb.append("ATB(").append(id).append("[").append(indexExp).append("]<-").append(exp).append(";").toString();:};


Expression  ::= Expression:e1 Operator:op Expression:e2 
				{:sb.setLength(0);RESULT = sb.append("Exp(").append(e1).append(" ").append(op).append(" ").append(e2).append(")").toString();:} 
			| Expression:e1 L_CON Expression:ebrkt R_CON
				{:sb.setLength(0);RESULT = sb.append("Exp(").append(e1).append("[").append(ebrkt).append("]").append(")").toString();:}
			| Expression:exp DOT LENGTH
				{:sb.setLength(0);RESULT = sb.append("Exp(").append(exp).append(".length )").toString();:}
			| Expression:exp DOT Identifier:id L_PARE ExpArguments:args R_PARE
				{:sb.setLength(0);RESULT = sb.append("Exp(").append(exp).append(".").append(id).append("( ").append(args).append(" ) )").toString();:}
			| INTEGER:num 
				{:sb.setLength(0);RESULT =sb.append("Exp(").append(num).append(")").toString();:}
			| TRUE	
				{:RESULT ="Exp(true)"; :}
			| FALSE 
				{:RESULT ="Exp(false)"; :}
			| Identifier:id 
				{:sb.setLength(0);RESULT =sb.append("Exp(").append(id).append(")").toString();:}
			| THIS 
				{:RESULT ="Exp(this)"; :}
			| NEW INT L_CON Expression:exp R_CON
				{:sb.setLength(0);RESULT = sb.append("Exp( new int[").append(exp).append("])").toString();:}
			| NEW Identifier:id L_PARE R_PARE
				{:sb.setLength(0);RESULT = sb.append("Exp(").append(id).append("() )").toString();:}
			| NOT Expression:exp
				{:sb.setLength(0);RESULT = sb.append("Exp( !").append(exp).append(")").toString();:}
			| L_PARE Expression:exp R_PARE
				{:sb.setLength(0);RESULT = sb.append("Exp( (").append(exp).append(") )").toString();:};


Identifier ::= ID:id {:sb.setLength(0);RESULT = sb.append("Id( ").append(id).append(" )").toString(); :};